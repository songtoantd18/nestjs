import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Post } from './post.entity';
import { Not, Repository } from 'typeorm';
import { get, request } from 'http';
import { CreatePostDto } from './dto/createPost.dto';
import { User } from 'src/user/user.entity';
import { UpdatePostDto } from './dto/updatePost.dto';
import { Permission } from 'src/helper/checkPermission.helper';
@Injectable()
export class PostService {
  constructor(
    @InjectRepository(Post)
    private postsRepository: Repository<Post>,
  ) {}
  createPost(requestBody: CreatePostDto, currentUser: User) {
    console.log('ƒë√¢y l√† postservice');
    const post = this.postsRepository.create(requestBody);
    post.user = currentUser;
    return this.postsRepository.save(post);
  }
  getAllPosts() {
    console.log('ƒë√¢y l√† get all posts');
    return this.postsRepository.find();
  }
  async getPostById(id: number) {
    console.log(
      'üöÄ ~11111111111111111111111 PostService ~ getPostById ~ id:',
      id,
    );
    let postById = await this.postsRepository.findOneBy({ id });
    console.log('üöÄ ~ PostService ~ getPostById ~ postById:', postById);
    if (!postById) {
      throw new NotFoundException(`Post not found with this ${id}`);
    }
    return postById;
  }

  async updatePost(id: number, requestBody: UpdatePostDto, currentUser: User) {
    console.log(
      'üöÄ ~ PostService ~ updatePost ~ id:--------------------------',
      id,
    );
    let postById = await this.getPostById(id);
    console.log(
      'üöÄ ~ PostService ~ updatePost ~ postById:-------------------------',
      postById,
    );

    if (!postById) {
      throw new NotFoundException(`Post not found with this ${id}`);
    }

    postById = { ...postById, ...requestBody };
    Permission.checkPermission(postById.user.id, currentUser);
    // ch·ªânh ·ªü ƒë√¢y l·∫•y userid so s√°nh c√≥ ƒë∆∞·ª£c ph√©p c·∫•p quy·ªÅn ƒë·ªÉ edit ch·ª© eneus k c√≥ th√¨ ai c≈©ng c√≥ th·ªÉ x√≥a hay edit th√¨ k ƒë∆∞·ª£c sai logic

    return this.postsRepository.save(postById);
  }
  async deletePost(id: number, currentUser: User) {
    let postById = await this.getPostById(id);
    if (!postById) {
      throw new NotFoundException(`Post not found with this ${id}`);
    }
    Permission.checkPermission(postById.user.id, currentUser);
    this.postsRepository.delete(postById.id);
    return {
      message: 'x√≥a b√†i post th√†nh c√¥ng',
      deletedPost: postById,
    };
  }
}
